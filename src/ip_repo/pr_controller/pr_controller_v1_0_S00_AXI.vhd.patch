3a4,27
> --! @brief AXI4 lite slave interface with four 32-bit registers
> --!
> --! @detail
> --!
> --! <B>Register overview</B>
> --!
> --! Register   | Offset     | Access  | Description
> --! ---------- | ---------- | ------- | ----------------
> --! STAT       | 0x00000000 | ro      | Status register
> --! Register 1 | 0x00000004 | ro      | reserved
> --! Register 2 | 0x00000008 | ro      | reserved
> --! Register 3 | 0x0000000c | ro      | reserved
> --!
> --! <B>Status Register details</B>
> --!
> --! Address offset: 0x00000000
> --!
> --! Range   | Access | Description
> --! ------- | ------ | ------------
> --! [31:13] | ro     | reserved
> --! [12:5]  | ro     | FSM state
> --! [4]     | ro     | ctw (clear to write)
> --! [3:0]   | ro     | ICAP status
> --!
18a43,45
> 		pr_controller_status_icap   : in std_logic_vector(3 downto 0); --! ICAP state
>       	pr_controller_status_fsm    : in std_logic_vector(7 downto 0); --! FSM state
>       	pr_controller_tready        : in std_logic;                    --! Ready to write data signal (generated by pr_controller)
211,265d237
< 	process (S_AXI_ACLK)
< 	variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0); 
< 	begin
< 	  if rising_edge(S_AXI_ACLK) then 
< 	    if S_AXI_ARESETN = '0' then
< 	      slv_reg0 <= (others => '0');
< 	      slv_reg1 <= (others => '0');
< 	      slv_reg2 <= (others => '0');
< 	      slv_reg3 <= (others => '0');
< 	    else
< 	      loc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
< 	      if (slv_reg_wren = '1') then
< 	        case loc_addr is
< 	          when b"00" =>
< 	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
< 	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
< 	                -- Respective byte enables are asserted as per write strobes                   
< 	                -- slave registor 0
< 	                slv_reg0(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
< 	              end if;
< 	            end loop;
< 	          when b"01" =>
< 	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
< 	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
< 	                -- Respective byte enables are asserted as per write strobes                   
< 	                -- slave registor 1
< 	                slv_reg1(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
< 	              end if;
< 	            end loop;
< 	          when b"10" =>
< 	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
< 	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
< 	                -- Respective byte enables are asserted as per write strobes                   
< 	                -- slave registor 2
< 	                slv_reg2(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
< 	              end if;
< 	            end loop;
< 	          when b"11" =>
< 	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
< 	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
< 	                -- Respective byte enables are asserted as per write strobes                   
< 	                -- slave registor 3
< 	                slv_reg3(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
< 	              end if;
< 	            end loop;
< 	          when others =>
< 	            slv_reg0 <= slv_reg0;
< 	            slv_reg1 <= slv_reg1;
< 	            slv_reg2 <= slv_reg2;
< 	            slv_reg3 <= slv_reg3;
< 	        end case;
< 	      end if;
< 	    end if;
< 	  end if;                   
< 	end process; 
386a359,365
>     slv_reg0 <= "0000000000000000000" &       -- [31:13]
>                 pr_controller_status_fsm &  -- [12:5]
>                 pr_controller_tready &      -- [4]
>                 pr_controller_status_icap;  -- [3:0]
>     slv_reg1 <= (others => '0');
>     slv_reg2 <= (others => '0');
>     slv_reg3 <= (others => '0');
